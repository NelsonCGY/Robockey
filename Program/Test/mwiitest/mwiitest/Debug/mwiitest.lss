
mwiitest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  00000876  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002419  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa1  00000000  00000000  00002ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000168d  00000000  00000000  00003e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  000054d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e9  00000000  00000000  0000598c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000201c  00000000  00000000  00006375  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00008391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_10>
  2c:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ea ed       	ldi	r30, 0xDA	; 218
 174:	f7 e0       	ldi	r31, 0x07	; 7
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ab 30       	cpi	r26, 0x0B	; 11
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
 196:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <main>:
#include "m_wii.h"
#include "m_bus.h"

int main(void)
{
	if(m_wii_open()){
 19e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <m_wii_open>
 1a2:	88 23       	and	r24, r24
 1a4:	19 f0       	breq	.+6      	; 0x1ac <main+0xe>
		m_green(ON);
 1a6:	6a 9a       	sbi	0x0d, 2	; 13
 1a8:	72 98       	cbi	0x0e, 2	; 14
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <main+0x12>
	}
	else{
		m_red(ON);
 1ac:	6e 9a       	sbi	0x0d, 6	; 13
 1ae:	76 98       	cbi	0x0e, 6	; 14
	}
    /* Replace with your application code */
    while (1) 
    {
		
    }
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <main+0x12>

000001b2 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 1b2:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 1b4:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 1b6:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 1be:	e9 e6       	ldi	r30, 0x69	; 105
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	80 83       	st	Z, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 7e       	andi	r24, 0xEF	; 239
 1cc:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 1ce:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 1d0:	78 94       	sei
 1d2:	08 95       	ret

000001d4 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 1e6:	e1 ee       	ldi	r30, 0xE1	; 225
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
        UDINT = 0;
 1ec:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 1ee:	83 ff       	sbrs	r24, 3
 1f0:	11 c0       	rjmp	.+34     	; 0x214 <__vector_10+0x40>
		UENUM = 0;
 1f2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 1fc:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 200:	92 e1       	ldi	r25, 0x12	; 18
 202:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 206:	98 e0       	ldi	r25, 0x08	; 8
 208:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 20c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <usb_configuration>
		cdc_line_rtsdtr = 0;
 210:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
        }
	if (intbits & (1<<SOFI)) {
 214:	82 ff       	sbrs	r24, 2
 216:	13 c0       	rjmp	.+38     	; 0x23e <__vector_10+0x6a>
		if (usb_configuration) {
 218:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usb_configuration>
 21c:	88 23       	and	r24, r24
 21e:	79 f0       	breq	.+30     	; 0x23e <__vector_10+0x6a>
			t = transmit_flush_timer;
 220:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <transmit_flush_timer>
			if (t) {
 224:	88 23       	and	r24, r24
 226:	59 f0       	breq	.+22     	; 0x23e <__vector_10+0x6a>
				transmit_flush_timer = --t;
 228:	81 50       	subi	r24, 0x01	; 1
 22a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_flush_timer>
				if (!t) {
 22e:	81 11       	cpse	r24, r1
 230:	06 c0       	rjmp	.+12     	; 0x23e <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
 238:	8a e3       	ldi	r24, 0x3A	; 58
 23a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 27a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
 27e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 282:	83 ff       	sbrs	r24, 3
 284:	4c c1       	rjmp	.+664    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
                bmRequestType = UEDATX;
 286:	e1 ef       	ldi	r30, 0xF1	; 241
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 28c:	80 81       	ld	r24, Z
                wValue = UEDATX;
 28e:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 290:	90 81       	ld	r25, Z
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 296:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 298:	90 81       	ld	r25, Z
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	59 2b       	or	r21, r25
                wLength = UEDATX;
 29e:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 2a0:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 2a2:	92 ef       	ldi	r25, 0xF2	; 242
 2a4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 2a8:	86 30       	cpi	r24, 0x06	; 6
 2aa:	09 f0       	breq	.+2      	; 0x2ae <__vector_11+0x5e>
 2ac:	58 c0       	rjmp	.+176    	; 0x35e <__vector_11+0x10e>
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 2b0:	81 e2       	ldi	r24, 0x21	; 33
 2b2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					return;
 2b6:	3a c1       	rjmp	.+628    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 2b8:	66 e0       	ldi	r22, 0x06	; 6
 2ba:	8c ea       	ldi	r24, 0xAC	; 172
 2bc:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 2be:	fc 01       	movw	r30, r24
 2c0:	a5 91       	lpm	r26, Z+
 2c2:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 2c4:	2a 17       	cp	r18, r26
 2c6:	3b 07       	cpc	r19, r27
 2c8:	11 f0       	breq	.+4      	; 0x2ce <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 2ca:	07 96       	adiw	r24, 0x07	; 7
					continue;
 2cc:	23 c0       	rjmp	.+70     	; 0x314 <__vector_11+0xc4>
				}
				list += 2;
 2ce:	fc 01       	movw	r30, r24
 2d0:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 2d2:	a5 91       	lpm	r26, Z+
 2d4:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 2d6:	4a 17       	cp	r20, r26
 2d8:	5b 07       	cpc	r21, r27
 2da:	11 f0       	breq	.+4      	; 0x2e0 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 2dc:	07 96       	adiw	r24, 0x07	; 7
					continue;
 2de:	1a c0       	rjmp	.+52     	; 0x314 <__vector_11+0xc4>
				}
				list += 2;
 2e0:	fc 01       	movw	r30, r24
 2e2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 2e4:	45 91       	lpm	r20, Z+
 2e6:	54 91       	lpm	r21, Z
				list += 2;
 2e8:	fc 01       	movw	r30, r24
 2ea:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 2ec:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 2ee:	87 2f       	mov	r24, r23
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 2f4:	8f 3f       	cpi	r24, 0xFF	; 255
 2f6:	91 05       	cpc	r25, r1
 2f8:	19 f0       	breq	.+6      	; 0x300 <__vector_11+0xb0>
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__vector_11+0xb0>
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	82 17       	cp	r24, r18
 302:	08 f4       	brcc	.+2      	; 0x306 <__vector_11+0xb6>
 304:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 306:	a8 ee       	ldi	r26, 0xE8	; 232
 308:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 30a:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 30c:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 30e:	c1 ef       	ldi	r28, 0xF1	; 241
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	03 c0       	rjmp	.+6      	; 0x31a <__vector_11+0xca>
 314:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 316:	99 f6       	brne	.-90     	; 0x2be <__vector_11+0x6e>
 318:	cb cf       	rjmp	.-106    	; 0x2b0 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 31a:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 31c:	98 2f       	mov	r25, r24
 31e:	95 70       	andi	r25, 0x05	; 5
 320:	e1 f3       	breq	.-8      	; 0x31a <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 322:	82 fd       	sbrc	r24, 2
 324:	03 c1       	rjmp	.+518    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 326:	32 2f       	mov	r19, r18
 328:	21 31       	cpi	r18, 0x11	; 17
 32a:	08 f0       	brcs	.+2      	; 0x32e <__vector_11+0xde>
 32c:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 32e:	33 23       	and	r19, r19
 330:	09 f4       	brne	.+2      	; 0x334 <__vector_11+0xe4>
 332:	f9 c0       	rjmp	.+498    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 334:	fa 01       	movw	r30, r20
 336:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 338:	94 91       	lpm	r25, Z
 33a:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 33c:	81 50       	subi	r24, 0x01	; 1
 33e:	31 96       	adiw	r30, 0x01	; 1
 340:	81 11       	cpse	r24, r1
 342:	fa cf       	rjmp	.-12     	; 0x338 <__vector_11+0xe8>
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	83 0f       	add	r24, r19
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	48 0f       	add	r20, r24
 34e:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 350:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 352:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 354:	21 11       	cpse	r18, r1
 356:	e1 cf       	rjmp	.-62     	; 0x31a <__vector_11+0xca>
 358:	30 31       	cpi	r19, 0x10	; 16
 35a:	f9 f2       	breq	.-66     	; 0x31a <__vector_11+0xca>
 35c:	e7 c0       	rjmp	.+462    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 35e:	85 30       	cpi	r24, 0x05	; 5
 360:	61 f4       	brne	.+24     	; 0x37a <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 362:	8e ef       	ldi	r24, 0xFE	; 254
 364:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 368:	e8 ee       	ldi	r30, 0xE8	; 232
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	80 ff       	sbrs	r24, 0
 370:	fd cf       	rjmp	.-6      	; 0x36c <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 372:	20 68       	ori	r18, 0x80	; 128
 374:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 378:	d9 c0       	rjmp	.+434    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 37a:	89 30       	cpi	r24, 0x09	; 9
 37c:	09 f0       	breq	.+2      	; 0x380 <__vector_11+0x130>
 37e:	35 c0       	rjmp	.+106    	; 0x3ea <__vector_11+0x19a>
 380:	61 11       	cpse	r22, r1
 382:	cd c0       	rjmp	.+410    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			usb_configuration = wValue;
 384:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <usb_configuration>
			cdc_line_rtsdtr = 0;
 388:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			transmit_flush_timer = 0;
 38c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 390:	8e ef       	ldi	r24, 0xFE	; 254
 392:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 396:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 398:	25 e5       	ldi	r18, 0x55	; 85
 39a:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 39c:	c9 ee       	ldi	r28, 0xE9	; 233
 39e:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 3a0:	ab ee       	ldi	r26, 0xEB	; 235
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 3a4:	0c ee       	ldi	r16, 0xEC	; 236
 3a6:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 3a8:	6d ee       	ldi	r22, 0xED	; 237
 3aa:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 3ac:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 3ae:	a9 01       	movw	r20, r18
 3b0:	4f 5f       	subi	r20, 0xFF	; 255
 3b2:	5f 4f       	sbci	r21, 0xFF	; 255
 3b4:	f9 01       	movw	r30, r18
 3b6:	94 91       	lpm	r25, Z
				UECONX = en;
 3b8:	9c 93       	st	X, r25
				if (en) {
 3ba:	99 23       	and	r25, r25
 3bc:	61 f0       	breq	.+24     	; 0x3d6 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 3be:	fa 01       	movw	r30, r20
 3c0:	44 91       	lpm	r20, Z
 3c2:	f8 01       	movw	r30, r16
 3c4:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 3c6:	f9 01       	movw	r30, r18
 3c8:	32 96       	adiw	r30, 0x02	; 2
 3ca:	94 91       	lpm	r25, Z
 3cc:	2d 5f       	subi	r18, 0xFD	; 253
 3ce:	3f 4f       	sbci	r19, 0xFF	; 255
 3d0:	fb 01       	movw	r30, r22
 3d2:	90 83       	st	Z, r25
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 3d6:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	85 30       	cpi	r24, 0x05	; 5
 3dc:	39 f7       	brne	.-50     	; 0x3ac <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 3de:	ea ee       	ldi	r30, 0xEA	; 234
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	8e e1       	ldi	r24, 0x1E	; 30
 3e4:	80 83       	st	Z, r24
        		UERST = 0;
 3e6:	10 82       	st	Z, r1
			return;
 3e8:	a1 c0       	rjmp	.+322    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	81 f4       	brne	.+32     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ee:	60 38       	cpi	r22, 0x80	; 128
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <__vector_11+0x1a4>
 3f2:	95 c0       	rjmp	.+298    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 3f4:	e8 ee       	ldi	r30, 0xE8	; 232
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	80 ff       	sbrs	r24, 0
 3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 3fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usb_configuration>
 402:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 406:	8e ef       	ldi	r24, 0xFE	; 254
 408:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 40c:	8f c0       	rjmp	.+286    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 40e:	81 32       	cpi	r24, 0x21	; 33
 410:	b9 f4       	brne	.+46     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 412:	61 3a       	cpi	r22, 0xA1	; 161
 414:	09 f0       	breq	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	83 c0       	rjmp	.+262    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 418:	e8 ee       	ldi	r30, 0xE8	; 232
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	80 ff       	sbrs	r24, 0
 420:	fd cf       	rjmp	.-6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 422:	e0 e0       	ldi	r30, 0x00	; 0
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	27 e0       	ldi	r18, 0x07	; 7
 428:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 42a:	a1 ef       	ldi	r26, 0xF1	; 241
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	81 91       	ld	r24, Z+
 430:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 432:	e2 17       	cp	r30, r18
 434:	f3 07       	cpc	r31, r19
 436:	d9 f7       	brne	.-10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 438:	8e ef       	ldi	r24, 0xFE	; 254
 43a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 43e:	76 c0       	rjmp	.+236    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 440:	80 32       	cpi	r24, 0x20	; 32
 442:	d1 f4       	brne	.+52     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 444:	61 32       	cpi	r22, 0x21	; 33
 446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	6a c0       	rjmp	.+212    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 44a:	e8 ee       	ldi	r30, 0xE8	; 232
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	82 ff       	sbrs	r24, 2
 452:	fd cf       	rjmp	.-6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 454:	e0 e0       	ldi	r30, 0x00	; 0
 456:	f1 e0       	ldi	r31, 0x01	; 1
 458:	27 e0       	ldi	r18, 0x07	; 7
 45a:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 45c:	a1 ef       	ldi	r26, 0xF1	; 241
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	8c 91       	ld	r24, X
 462:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 464:	e2 17       	cp	r30, r18
 466:	f3 07       	cpc	r31, r19
 468:	d9 f7       	brne	.-10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 46a:	e8 ee       	ldi	r30, 0xE8	; 232
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	8b ef       	ldi	r24, 0xFB	; 251
 470:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 472:	8e ef       	ldi	r24, 0xFE	; 254
 474:	80 83       	st	Z, r24
 476:	5a c0       	rjmp	.+180    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 478:	82 32       	cpi	r24, 0x22	; 34
 47a:	71 f4       	brne	.+28     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 47c:	61 32       	cpi	r22, 0x21	; 33
 47e:	09 f0       	breq	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	4e c0       	rjmp	.+156    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			cdc_line_rtsdtr = wValue;
 482:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 486:	e8 ee       	ldi	r30, 0xE8	; 232
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	80 ff       	sbrs	r24, 0
 48e:	fd cf       	rjmp	.-6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 490:	8e ef       	ldi	r24, 0xFE	; 254
 492:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 496:	4a c0       	rjmp	.+148    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 498:	81 11       	cpse	r24, r1
 49a:	1a c0       	rjmp	.+52     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 49c:	e8 ee       	ldi	r30, 0xE8	; 232
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 4a6:	62 38       	cpi	r22, 0x82	; 130
 4a8:	51 f4       	brne	.+20     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				UENUM = wIndex;
 4aa:	e9 ee       	ldi	r30, 0xE9	; 233
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 4b0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 4b4:	85 fb       	bst	r24, 5
 4b6:	88 27       	eor	r24, r24
 4b8:	80 f9       	bld	r24, 0
				UENUM = 0;
 4ba:	10 82       	st	Z, r1
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 4be:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 4c0:	e1 ef       	ldi	r30, 0xF1	; 241
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 83       	st	Z, r24
			UEDATX = 0;
 4c6:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4c8:	8e ef       	ldi	r24, 0xFE	; 254
 4ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4ce:	2e c0       	rjmp	.+92     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 4d0:	98 2f       	mov	r25, r24
 4d2:	9d 7f       	andi	r25, 0xFD	; 253
 4d4:	91 30       	cpi	r25, 0x01	; 1
 4d6:	19 f5       	brne	.+70     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		  && bmRequestType == 0x02 && wValue == 0) {
 4d8:	62 30       	cpi	r22, 0x02	; 2
 4da:	09 f5       	brne	.+66     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4dc:	23 2b       	or	r18, r19
 4de:	f9 f4       	brne	.+62     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			i = wIndex & 0x7F;
 4e0:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 4e2:	9f ef       	ldi	r25, 0xFF	; 255
 4e4:	94 0f       	add	r25, r20
 4e6:	94 30       	cpi	r25, 0x04	; 4
 4e8:	d0 f4       	brcc	.+52     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4ea:	9e ef       	ldi	r25, 0xFE	; 254
 4ec:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 4f0:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	21 f4       	brne	.+8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 4f8:	81 e2       	ldi	r24, 0x21	; 33
 4fa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 4fe:	16 c0       	rjmp	.+44     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 500:	89 e1       	ldi	r24, 0x19	; 25
 502:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	4a 95       	dec	r20
 512:	e2 f7       	brpl	.-8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 514:	ea ee       	ldi	r30, 0xEA	; 234
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 83       	st	Z, r24
					UERST = 0;
 51a:	10 82       	st	Z, r1
 51c:	07 c0       	rjmp	.+14     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 51e:	81 e2       	ldi	r24, 0x21	; 33
 520:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 524:	03 c0       	rjmp	.+6      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 526:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 528:	21 11       	cpse	r18, r1
 52a:	f7 ce       	rjmp	.-530    	; 0x31a <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
 55a:	ec eb       	ldi	r30, 0xBC	; 188
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	88 23       	and	r24, r24
 562:	34 f0       	brlt	.+12     	; 0x570 <twi_wait+0x1a>
 564:	2f 5f       	subi	r18, 0xFF	; 255
 566:	3f 4f       	sbci	r19, 0xFF	; 255
 568:	29 3e       	cpi	r18, 0xE9	; 233
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	38 07       	cpc	r19, r24
 56e:	b9 f7       	brne	.-18     	; 0x55e <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	28 3e       	cpi	r18, 0xE8	; 232
 574:	33 40       	sbci	r19, 0x03	; 3
 576:	09 f4       	brne	.+2      	; 0x57a <twi_wait+0x24>
 578:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
 57a:	08 95       	ret

0000057c <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
 57c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 580:	84 e8       	ldi	r24, 0x84	; 132
 582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(twi_wait())					// timed out
 586:	0e 94 ab 02 	call	0x556	; 0x556 <twi_wait>
 58a:	88 23       	and	r24, r24
 58c:	19 f0       	breq	.+6      	; 0x594 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
 58e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 592:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
 594:	08 95       	ret

00000596 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
 596:	cf 93       	push	r28
 598:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 59a:	94 ea       	ldi	r25, 0xA4	; 164
 59c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	if(!twi_wait())
 5a0:	0e 94 ab 02 	call	0x556	; 0x556 <twi_wait>
 5a4:	88 23       	and	r24, r24
 5a6:	61 f0       	breq	.+24     	; 0x5c0 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
 5a8:	8c 2f       	mov	r24, r28
 5aa:	88 0f       	add	r24, r24
 5ac:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
 5b0:	80 32       	cpi	r24, 0x20	; 32
 5b2:	29 f4       	brne	.+10     	; 0x5be <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 5b4:	84 e9       	ldi	r24, 0x94	; 148
 5b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return 0;	// failure
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <start_write+0x2a>
	}	
	return 1;	// success
 5be:	81 e0       	ldi	r24, 0x01	; 1
}	
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
 5c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 5c8:	88 e5       	ldi	r24, 0x58	; 88
 5ca:	0e 94 cb 02 	call	0x596	; 0x596 <start_write>
 5ce:	88 23       	and	r24, r24
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <m_wii_open+0x10>
 5d2:	cd c0       	rjmp	.+410    	; 0x76e <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
 5d4:	80 e3       	ldi	r24, 0x30	; 48
 5d6:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <m_wii_open+0x1c>
 5de:	c9 c0       	rjmp	.+402    	; 0x772 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 5e6:	88 23       	and	r24, r24
 5e8:	09 f4       	brne	.+2      	; 0x5ec <m_wii_open+0x28>
 5ea:	c5 c0       	rjmp	.+394    	; 0x776 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 5ec:	84 e9       	ldi	r24, 0x94	; 148
 5ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f2:	83 ec       	ldi	r24, 0xC3	; 195
 5f4:	99 e0       	ldi	r25, 0x09	; 9
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <m_wii_open+0x32>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <m_wii_open+0x38>
 5fc:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 5fe:	88 e5       	ldi	r24, 0x58	; 88
 600:	0e 94 cb 02 	call	0x596	; 0x596 <start_write>
 604:	88 23       	and	r24, r24
 606:	09 f4       	brne	.+2      	; 0x60a <m_wii_open+0x46>
 608:	b8 c0       	rjmp	.+368    	; 0x77a <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 610:	88 23       	and	r24, r24
 612:	09 f4       	brne	.+2      	; 0x616 <m_wii_open+0x52>
 614:	b4 c0       	rjmp	.+360    	; 0x77e <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 61c:	88 23       	and	r24, r24
 61e:	09 f4       	brne	.+2      	; 0x622 <m_wii_open+0x5e>
 620:	b0 c0       	rjmp	.+352    	; 0x782 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 628:	88 23       	and	r24, r24
 62a:	09 f4       	brne	.+2      	; 0x62e <m_wii_open+0x6a>
 62c:	ac c0       	rjmp	.+344    	; 0x786 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 634:	88 23       	and	r24, r24
 636:	09 f4       	brne	.+2      	; 0x63a <m_wii_open+0x76>
 638:	a8 c0       	rjmp	.+336    	; 0x78a <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 640:	88 23       	and	r24, r24
 642:	09 f4       	brne	.+2      	; 0x646 <m_wii_open+0x82>
 644:	a4 c0       	rjmp	.+328    	; 0x78e <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 64c:	88 23       	and	r24, r24
 64e:	09 f4       	brne	.+2      	; 0x652 <m_wii_open+0x8e>
 650:	a0 c0       	rjmp	.+320    	; 0x792 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 658:	88 23       	and	r24, r24
 65a:	09 f4       	brne	.+2      	; 0x65e <m_wii_open+0x9a>
 65c:	9c c0       	rjmp	.+312    	; 0x796 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
 65e:	80 e9       	ldi	r24, 0x90	; 144
 660:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 664:	88 23       	and	r24, r24
 666:	09 f4       	brne	.+2      	; 0x66a <m_wii_open+0xa6>
 668:	98 c0       	rjmp	.+304    	; 0x79a <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 66a:	84 e9       	ldi	r24, 0x94	; 148
 66c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 670:	83 ec       	ldi	r24, 0xC3	; 195
 672:	99 e0       	ldi	r25, 0x09	; 9
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <m_wii_open+0xb0>
 678:	00 c0       	rjmp	.+0      	; 0x67a <m_wii_open+0xb6>
 67a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 67c:	88 e5       	ldi	r24, 0x58	; 88
 67e:	0e 94 cb 02 	call	0x596	; 0x596 <start_write>
 682:	88 23       	and	r24, r24
 684:	09 f4       	brne	.+2      	; 0x688 <m_wii_open+0xc4>
 686:	8b c0       	rjmp	.+278    	; 0x79e <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
 688:	87 e0       	ldi	r24, 0x07	; 7
 68a:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 68e:	88 23       	and	r24, r24
 690:	09 f4       	brne	.+2      	; 0x694 <m_wii_open+0xd0>
 692:	87 c0       	rjmp	.+270    	; 0x7a2 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 69a:	88 23       	and	r24, r24
 69c:	09 f4       	brne	.+2      	; 0x6a0 <m_wii_open+0xdc>
 69e:	83 c0       	rjmp	.+262    	; 0x7a6 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
 6a0:	81 e4       	ldi	r24, 0x41	; 65
 6a2:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 6a6:	88 23       	and	r24, r24
 6a8:	09 f4       	brne	.+2      	; 0x6ac <m_wii_open+0xe8>
 6aa:	7f c0       	rjmp	.+254    	; 0x7aa <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 6ac:	84 e9       	ldi	r24, 0x94	; 148
 6ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6b2:	83 ec       	ldi	r24, 0xC3	; 195
 6b4:	99 e0       	ldi	r25, 0x09	; 9
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <m_wii_open+0xf2>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <m_wii_open+0xf8>
 6bc:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 6be:	88 e5       	ldi	r24, 0x58	; 88
 6c0:	0e 94 cb 02 	call	0x596	; 0x596 <start_write>
 6c4:	88 23       	and	r24, r24
 6c6:	09 f4       	brne	.+2      	; 0x6ca <m_wii_open+0x106>
 6c8:	72 c0       	rjmp	.+228    	; 0x7ae <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
 6ca:	8a e1       	ldi	r24, 0x1A	; 26
 6cc:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 6d0:	88 23       	and	r24, r24
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <m_wii_open+0x112>
 6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
 6d6:	80 e4       	ldi	r24, 0x40	; 64
 6d8:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 6dc:	88 23       	and	r24, r24
 6de:	09 f4       	brne	.+2      	; 0x6e2 <m_wii_open+0x11e>
 6e0:	6a c0       	rjmp	.+212    	; 0x7b6 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 6e8:	88 23       	and	r24, r24
 6ea:	09 f4       	brne	.+2      	; 0x6ee <m_wii_open+0x12a>
 6ec:	66 c0       	rjmp	.+204    	; 0x7ba <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 6ee:	84 e9       	ldi	r24, 0x94	; 148
 6f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6f4:	83 ec       	ldi	r24, 0xC3	; 195
 6f6:	99 e0       	ldi	r25, 0x09	; 9
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <m_wii_open+0x134>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <m_wii_open+0x13a>
 6fe:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 700:	88 e5       	ldi	r24, 0x58	; 88
 702:	0e 94 cb 02 	call	0x596	; 0x596 <start_write>
 706:	88 23       	and	r24, r24
 708:	09 f4       	brne	.+2      	; 0x70c <m_wii_open+0x148>
 70a:	59 c0       	rjmp	.+178    	; 0x7be <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
 70c:	83 e3       	ldi	r24, 0x33	; 51
 70e:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 712:	88 23       	and	r24, r24
 714:	09 f4       	brne	.+2      	; 0x718 <m_wii_open+0x154>
 716:	55 c0       	rjmp	.+170    	; 0x7c2 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 71e:	88 23       	and	r24, r24
 720:	09 f4       	brne	.+2      	; 0x724 <m_wii_open+0x160>
 722:	51 c0       	rjmp	.+162    	; 0x7c6 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 724:	84 e9       	ldi	r24, 0x94	; 148
 726:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 72a:	83 ec       	ldi	r24, 0xC3	; 195
 72c:	99 e0       	ldi	r25, 0x09	; 9
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <m_wii_open+0x16a>
 732:	00 c0       	rjmp	.+0      	; 0x734 <m_wii_open+0x170>
 734:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 736:	88 e5       	ldi	r24, 0x58	; 88
 738:	0e 94 cb 02 	call	0x596	; 0x596 <start_write>
 73c:	88 23       	and	r24, r24
 73e:	09 f4       	brne	.+2      	; 0x742 <m_wii_open+0x17e>
 740:	44 c0       	rjmp	.+136    	; 0x7ca <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
 742:	80 e3       	ldi	r24, 0x30	; 48
 744:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 748:	88 23       	and	r24, r24
 74a:	09 f4       	brne	.+2      	; 0x74e <m_wii_open+0x18a>
 74c:	40 c0       	rjmp	.+128    	; 0x7ce <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
 74e:	88 e0       	ldi	r24, 0x08	; 8
 750:	0e 94 be 02 	call	0x57c	; 0x57c <send_byte>
 754:	88 23       	and	r24, r24
 756:	e9 f1       	breq	.+122    	; 0x7d2 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 758:	84 e9       	ldi	r24, 0x94	; 148
 75a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 75e:	83 ec       	ldi	r24, 0xC3	; 195
 760:	99 e0       	ldi	r25, 0x09	; 9
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <m_wii_open+0x19e>
 766:	00 c0       	rjmp	.+0      	; 0x768 <m_wii_open+0x1a4>
 768:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
 7d2:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
 7d4:	08 95       	ret

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
