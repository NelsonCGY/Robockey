
MotorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000147  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000097  00000000  00000000  0000066f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a3  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014b  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a1  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 90 00 	call	0x120	; 0x120 <main>
  bc:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <init_timer1>:
#define F_CPU 16000000
#include <avr/io.h>
#include "m_general.h"

void init_timer1(){
	OCR1A = 200;
  c4:	88 ec       	ldi	r24, 0xC8	; 200
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	clear(TCCR1B, CS12);		// prescalar /1, 16M
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
  da:	80 81       	ld	r24, Z
  dc:	8d 7f       	andi	r24, 0xFD	; 253
  de:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24

	set(TCCR1B, WGM13);			// (mode 15) UP to OCR1A, PWM mode
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
  f2:	e0 e8       	ldi	r30, 0x80	; 128
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	set(TCCR1A, WGM10);
  fc:	80 81       	ld	r24, Z
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	80 83       	st	Z, r24

	
	set(TCCR1A, COM1B1);		// clear at OCR1B, set at rollover
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
 108:	80 81       	ld	r24, Z
 10a:	8f 7e       	andi	r24, 0xEF	; 239
 10c:	80 83       	st	Z, r24
	set(TCCR1A, COM1C1);
 10e:	80 81       	ld	r24, Z
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);		// clear at OCR1C, set at rollover
 114:	80 81       	ld	r24, Z
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	80 83       	st	Z, r24


	set(DDRB, 6);				// left PWM OCR1B
 11a:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB, 7);				// right PWM OCR1C
 11c:	27 9a       	sbi	0x04, 7	; 4
 11e:	08 95       	ret

00000120 <main>:
}

int main(void)
{
	set(DDRB, 3);			// B3 left
 120:	23 9a       	sbi	0x04, 3	; 4
	set(DDRB, 2);			// B2 right
 122:	22 9a       	sbi	0x04, 2	; 4
	init_timer1();
 124:	0e 94 62 00 	call	0xc4	; 0xc4 <init_timer1>
	OCR1B = 0.60 * OCR1A;
 128:	c8 e8       	ldi	r28, 0x88	; 136
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	68 81       	ld	r22, Y
 12e:	79 81       	ldd	r23, Y+1	; 0x01
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 20 01 	call	0x240	; 0x240 <__floatunsisf>
 138:	2a e9       	ldi	r18, 0x9A	; 154
 13a:	39 e9       	ldi	r19, 0x99	; 153
 13c:	49 e1       	ldi	r20, 0x19	; 25
 13e:	5f e3       	ldi	r21, 0x3F	; 63
 140:	0e 94 86 01 	call	0x30c	; 0x30c <__mulsf3>
 144:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__fixunssfsi>
 148:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 14c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR1C = 0.60 * OCR1A;
 150:	68 81       	ld	r22, Y
 152:	79 81       	ldd	r23, Y+1	; 0x01
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 20 01 	call	0x240	; 0x240 <__floatunsisf>
 15c:	2a e9       	ldi	r18, 0x9A	; 154
 15e:	39 e9       	ldi	r19, 0x99	; 153
 160:	49 e1       	ldi	r20, 0x19	; 25
 162:	5f e3       	ldi	r21, 0x3F	; 63
 164:	0e 94 86 01 	call	0x30c	; 0x30c <__mulsf3>
 168:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__fixunssfsi>
 16c:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
 170:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
    /* Replace with your application code */
    while (1) 
    {
		set(PORTB,3);
		set(PORTB,2);
 174:	60 e3       	ldi	r22, 0x30	; 48
 176:	55 e7       	ldi	r21, 0x75	; 117
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
 178:	40 e4       	ldi	r20, 0x40	; 64
	OCR1B = 0.60 * OCR1A;
	OCR1C = 0.60 * OCR1A;
    /* Replace with your application code */
    while (1) 
    {
		set(PORTB,3);
 17a:	2b 9a       	sbi	0x05, 3	; 5
		set(PORTB,2);
 17c:	2a 9a       	sbi	0x05, 2	; 5
 17e:	26 2f       	mov	r18, r22
 180:	35 2f       	mov	r19, r21
 182:	05 c0       	rjmp	.+10     	; 0x18e <main+0x6e>
 184:	01 97       	sbiw	r24, 0x01	; 1
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x64>
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	31 09       	sbc	r19, r1
    /* Replace with your application code */
    while (1) 
    {
		set(PORTB,3);
		set(PORTB,2);
		for(int i = 0; i<30000; i++){
 18c:	19 f0       	breq	.+6      	; 0x194 <main+0x74>
	set(DDRB, 6);				// left PWM OCR1B
	set(DDRB, 7);				// right PWM OCR1C
}

int main(void)
{
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	f8 cf       	rjmp	.-16     	; 0x184 <main+0x64>
		set(PORTB,3);
		set(PORTB,2);
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
 194:	6e 9a       	sbi	0x0d, 6	; 13
 196:	8e b1       	in	r24, 0x0e	; 14
 198:	84 27       	eor	r24, r20
 19a:	8e b9       	out	0x0e, r24	; 14
		clear(PORTB,3); // R reverse
 19c:	2b 98       	cbi	0x05, 3	; 5
		set(PORTB,2);
 19e:	2a 9a       	sbi	0x05, 2	; 5
 1a0:	26 2f       	mov	r18, r22
 1a2:	35 2f       	mov	r19, r21
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <main+0x90>
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x86>
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	31 09       	sbc	r19, r1
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
		clear(PORTB,3); // R reverse
		set(PORTB,2);
		for(int i = 0; i<30000; i++){
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <main+0x96>
	OCR1C = 0.60 * OCR1A;
    /* Replace with your application code */
    while (1) 
    {
		set(PORTB,3);
		set(PORTB,2);
 1b0:	82 e3       	ldi	r24, 0x32	; 50
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	f8 cf       	rjmp	.-16     	; 0x1a6 <main+0x86>
		clear(PORTB,3); // R reverse
		set(PORTB,2);
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
 1b6:	6e 9a       	sbi	0x0d, 6	; 13
 1b8:	8e b1       	in	r24, 0x0e	; 14
 1ba:	84 27       	eor	r24, r20
 1bc:	8e b9       	out	0x0e, r24	; 14
		clear(PORTB,3); // R reverse
 1be:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTB,2); // L reverse
 1c0:	2a 98       	cbi	0x05, 2	; 5
 1c2:	26 2f       	mov	r18, r22
 1c4:	35 2f       	mov	r19, r21
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <main+0xb2>
 1c8:	01 97       	sbiw	r24, 0x01	; 1
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xa8>
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	31 09       	sbc	r19, r1
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
		clear(PORTB,3); // R reverse
		clear(PORTB,2); // L reverse
		for(int i = 0; i<30000; i++){
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <main+0xb8>
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
		clear(PORTB,3); // R reverse
		set(PORTB,2);
 1d2:	82 e3       	ldi	r24, 0x32	; 50
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	f8 cf       	rjmp	.-16     	; 0x1c8 <main+0xa8>
		clear(PORTB,3); // R reverse
		clear(PORTB,2); // L reverse
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
 1d8:	6e 9a       	sbi	0x0d, 6	; 13
 1da:	8e b1       	in	r24, 0x0e	; 14
 1dc:	84 27       	eor	r24, r20
 1de:	8e b9       	out	0x0e, r24	; 14
 1e0:	cc cf       	rjmp	.-104    	; 0x17a <main+0x5a>

000001e2 <__fixunssfsi>:
 1e2:	0e 94 65 01 	call	0x2ca	; 0x2ca <__fp_splitA>
 1e6:	88 f0       	brcs	.+34     	; 0x20a <__fixunssfsi+0x28>
 1e8:	9f 57       	subi	r25, 0x7F	; 127
 1ea:	98 f0       	brcs	.+38     	; 0x212 <__fixunssfsi+0x30>
 1ec:	b9 2f       	mov	r27, r25
 1ee:	99 27       	eor	r25, r25
 1f0:	b7 51       	subi	r27, 0x17	; 23
 1f2:	b0 f0       	brcs	.+44     	; 0x220 <__fixunssfsi+0x3e>
 1f4:	e1 f0       	breq	.+56     	; 0x22e <__fixunssfsi+0x4c>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	88 1f       	adc	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	1a f0       	brmi	.+6      	; 0x206 <__fixunssfsi+0x24>
 200:	ba 95       	dec	r27
 202:	c9 f7       	brne	.-14     	; 0x1f6 <__fixunssfsi+0x14>
 204:	14 c0       	rjmp	.+40     	; 0x22e <__fixunssfsi+0x4c>
 206:	b1 30       	cpi	r27, 0x01	; 1
 208:	91 f0       	breq	.+36     	; 0x22e <__fixunssfsi+0x4c>
 20a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__fp_zero>
 20e:	b1 e0       	ldi	r27, 0x01	; 1
 210:	08 95       	ret
 212:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__fp_zero>
 216:	67 2f       	mov	r22, r23
 218:	78 2f       	mov	r23, r24
 21a:	88 27       	eor	r24, r24
 21c:	b8 5f       	subi	r27, 0xF8	; 248
 21e:	39 f0       	breq	.+14     	; 0x22e <__fixunssfsi+0x4c>
 220:	b9 3f       	cpi	r27, 0xF9	; 249
 222:	cc f3       	brlt	.-14     	; 0x216 <__fixunssfsi+0x34>
 224:	86 95       	lsr	r24
 226:	77 95       	ror	r23
 228:	67 95       	ror	r22
 22a:	b3 95       	inc	r27
 22c:	d9 f7       	brne	.-10     	; 0x224 <__fixunssfsi+0x42>
 22e:	3e f4       	brtc	.+14     	; 0x23e <__fixunssfsi+0x5c>
 230:	90 95       	com	r25
 232:	80 95       	com	r24
 234:	70 95       	com	r23
 236:	61 95       	neg	r22
 238:	7f 4f       	sbci	r23, 0xFF	; 255
 23a:	8f 4f       	sbci	r24, 0xFF	; 255
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	08 95       	ret

00000240 <__floatunsisf>:
 240:	e8 94       	clt
 242:	09 c0       	rjmp	.+18     	; 0x256 <__floatsisf+0x12>

00000244 <__floatsisf>:
 244:	97 fb       	bst	r25, 7
 246:	3e f4       	brtc	.+14     	; 0x256 <__floatsisf+0x12>
 248:	90 95       	com	r25
 24a:	80 95       	com	r24
 24c:	70 95       	com	r23
 24e:	61 95       	neg	r22
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	8f 4f       	sbci	r24, 0xFF	; 255
 254:	9f 4f       	sbci	r25, 0xFF	; 255
 256:	99 23       	and	r25, r25
 258:	a9 f0       	breq	.+42     	; 0x284 <__floatsisf+0x40>
 25a:	f9 2f       	mov	r31, r25
 25c:	96 e9       	ldi	r25, 0x96	; 150
 25e:	bb 27       	eor	r27, r27
 260:	93 95       	inc	r25
 262:	f6 95       	lsr	r31
 264:	87 95       	ror	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	b7 95       	ror	r27
 26c:	f1 11       	cpse	r31, r1
 26e:	f8 cf       	rjmp	.-16     	; 0x260 <__floatsisf+0x1c>
 270:	fa f4       	brpl	.+62     	; 0x2b0 <__floatsisf+0x6c>
 272:	bb 0f       	add	r27, r27
 274:	11 f4       	brne	.+4      	; 0x27a <__floatsisf+0x36>
 276:	60 ff       	sbrs	r22, 0
 278:	1b c0       	rjmp	.+54     	; 0x2b0 <__floatsisf+0x6c>
 27a:	6f 5f       	subi	r22, 0xFF	; 255
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	8f 4f       	sbci	r24, 0xFF	; 255
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <__floatsisf+0x6c>
 284:	88 23       	and	r24, r24
 286:	11 f0       	breq	.+4      	; 0x28c <__floatsisf+0x48>
 288:	96 e9       	ldi	r25, 0x96	; 150
 28a:	11 c0       	rjmp	.+34     	; 0x2ae <__floatsisf+0x6a>
 28c:	77 23       	and	r23, r23
 28e:	21 f0       	breq	.+8      	; 0x298 <__floatsisf+0x54>
 290:	9e e8       	ldi	r25, 0x8E	; 142
 292:	87 2f       	mov	r24, r23
 294:	76 2f       	mov	r23, r22
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <__floatsisf+0x5e>
 298:	66 23       	and	r22, r22
 29a:	71 f0       	breq	.+28     	; 0x2b8 <__floatsisf+0x74>
 29c:	96 e8       	ldi	r25, 0x86	; 134
 29e:	86 2f       	mov	r24, r22
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	2a f0       	brmi	.+10     	; 0x2b0 <__floatsisf+0x6c>
 2a6:	9a 95       	dec	r25
 2a8:	66 0f       	add	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	88 1f       	adc	r24, r24
 2ae:	da f7       	brpl	.-10     	; 0x2a6 <__floatsisf+0x62>
 2b0:	88 0f       	add	r24, r24
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	97 f9       	bld	r25, 7
 2b8:	08 95       	ret

000002ba <__fp_split3>:
 2ba:	57 fd       	sbrc	r21, 7
 2bc:	90 58       	subi	r25, 0x80	; 128
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	59 f0       	breq	.+22     	; 0x2da <__fp_splitA+0x10>
 2c4:	5f 3f       	cpi	r21, 0xFF	; 255
 2c6:	71 f0       	breq	.+28     	; 0x2e4 <__fp_splitA+0x1a>
 2c8:	47 95       	ror	r20

000002ca <__fp_splitA>:
 2ca:	88 0f       	add	r24, r24
 2cc:	97 fb       	bst	r25, 7
 2ce:	99 1f       	adc	r25, r25
 2d0:	61 f0       	breq	.+24     	; 0x2ea <__fp_splitA+0x20>
 2d2:	9f 3f       	cpi	r25, 0xFF	; 255
 2d4:	79 f0       	breq	.+30     	; 0x2f4 <__fp_splitA+0x2a>
 2d6:	87 95       	ror	r24
 2d8:	08 95       	ret
 2da:	12 16       	cp	r1, r18
 2dc:	13 06       	cpc	r1, r19
 2de:	14 06       	cpc	r1, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	f2 cf       	rjmp	.-28     	; 0x2c8 <__fp_split3+0xe>
 2e4:	46 95       	lsr	r20
 2e6:	f1 df       	rcall	.-30     	; 0x2ca <__fp_splitA>
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <__fp_splitA+0x30>
 2ea:	16 16       	cp	r1, r22
 2ec:	17 06       	cpc	r1, r23
 2ee:	18 06       	cpc	r1, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	f1 cf       	rjmp	.-30     	; 0x2d6 <__fp_splitA+0xc>
 2f4:	86 95       	lsr	r24
 2f6:	71 05       	cpc	r23, r1
 2f8:	61 05       	cpc	r22, r1
 2fa:	08 94       	sec
 2fc:	08 95       	ret

000002fe <__fp_zero>:
 2fe:	e8 94       	clt

00000300 <__fp_szero>:
 300:	bb 27       	eor	r27, r27
 302:	66 27       	eor	r22, r22
 304:	77 27       	eor	r23, r23
 306:	cb 01       	movw	r24, r22
 308:	97 f9       	bld	r25, 7
 30a:	08 95       	ret

0000030c <__mulsf3>:
 30c:	0e 94 99 01 	call	0x332	; 0x332 <__mulsf3x>
 310:	0c 94 0a 02 	jmp	0x414	; 0x414 <__fp_round>
 314:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__fp_pscA>
 318:	38 f0       	brcs	.+14     	; 0x328 <__mulsf3+0x1c>
 31a:	0e 94 03 02 	call	0x406	; 0x406 <__fp_pscB>
 31e:	20 f0       	brcs	.+8      	; 0x328 <__mulsf3+0x1c>
 320:	95 23       	and	r25, r21
 322:	11 f0       	breq	.+4      	; 0x328 <__mulsf3+0x1c>
 324:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_inf>
 328:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__fp_nan>
 32c:	11 24       	eor	r1, r1
 32e:	0c 94 80 01 	jmp	0x300	; 0x300 <__fp_szero>

00000332 <__mulsf3x>:
 332:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__fp_split3>
 336:	70 f3       	brcs	.-36     	; 0x314 <__mulsf3+0x8>

00000338 <__mulsf3_pse>:
 338:	95 9f       	mul	r25, r21
 33a:	c1 f3       	breq	.-16     	; 0x32c <__mulsf3+0x20>
 33c:	95 0f       	add	r25, r21
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	55 1f       	adc	r21, r21
 342:	62 9f       	mul	r22, r18
 344:	f0 01       	movw	r30, r0
 346:	72 9f       	mul	r23, r18
 348:	bb 27       	eor	r27, r27
 34a:	f0 0d       	add	r31, r0
 34c:	b1 1d       	adc	r27, r1
 34e:	63 9f       	mul	r22, r19
 350:	aa 27       	eor	r26, r26
 352:	f0 0d       	add	r31, r0
 354:	b1 1d       	adc	r27, r1
 356:	aa 1f       	adc	r26, r26
 358:	64 9f       	mul	r22, r20
 35a:	66 27       	eor	r22, r22
 35c:	b0 0d       	add	r27, r0
 35e:	a1 1d       	adc	r26, r1
 360:	66 1f       	adc	r22, r22
 362:	82 9f       	mul	r24, r18
 364:	22 27       	eor	r18, r18
 366:	b0 0d       	add	r27, r0
 368:	a1 1d       	adc	r26, r1
 36a:	62 1f       	adc	r22, r18
 36c:	73 9f       	mul	r23, r19
 36e:	b0 0d       	add	r27, r0
 370:	a1 1d       	adc	r26, r1
 372:	62 1f       	adc	r22, r18
 374:	83 9f       	mul	r24, r19
 376:	a0 0d       	add	r26, r0
 378:	61 1d       	adc	r22, r1
 37a:	22 1f       	adc	r18, r18
 37c:	74 9f       	mul	r23, r20
 37e:	33 27       	eor	r19, r19
 380:	a0 0d       	add	r26, r0
 382:	61 1d       	adc	r22, r1
 384:	23 1f       	adc	r18, r19
 386:	84 9f       	mul	r24, r20
 388:	60 0d       	add	r22, r0
 38a:	21 1d       	adc	r18, r1
 38c:	82 2f       	mov	r24, r18
 38e:	76 2f       	mov	r23, r22
 390:	6a 2f       	mov	r22, r26
 392:	11 24       	eor	r1, r1
 394:	9f 57       	subi	r25, 0x7F	; 127
 396:	50 40       	sbci	r21, 0x00	; 0
 398:	9a f0       	brmi	.+38     	; 0x3c0 <__mulsf3_pse+0x88>
 39a:	f1 f0       	breq	.+60     	; 0x3d8 <__mulsf3_pse+0xa0>
 39c:	88 23       	and	r24, r24
 39e:	4a f0       	brmi	.+18     	; 0x3b2 <__mulsf3_pse+0x7a>
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	bb 1f       	adc	r27, r27
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	91 50       	subi	r25, 0x01	; 1
 3ae:	50 40       	sbci	r21, 0x00	; 0
 3b0:	a9 f7       	brne	.-22     	; 0x39c <__mulsf3_pse+0x64>
 3b2:	9e 3f       	cpi	r25, 0xFE	; 254
 3b4:	51 05       	cpc	r21, r1
 3b6:	80 f0       	brcs	.+32     	; 0x3d8 <__mulsf3_pse+0xa0>
 3b8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_inf>
 3bc:	0c 94 80 01 	jmp	0x300	; 0x300 <__fp_szero>
 3c0:	5f 3f       	cpi	r21, 0xFF	; 255
 3c2:	e4 f3       	brlt	.-8      	; 0x3bc <__mulsf3_pse+0x84>
 3c4:	98 3e       	cpi	r25, 0xE8	; 232
 3c6:	d4 f3       	brlt	.-12     	; 0x3bc <__mulsf3_pse+0x84>
 3c8:	86 95       	lsr	r24
 3ca:	77 95       	ror	r23
 3cc:	67 95       	ror	r22
 3ce:	b7 95       	ror	r27
 3d0:	f7 95       	ror	r31
 3d2:	e7 95       	ror	r30
 3d4:	9f 5f       	subi	r25, 0xFF	; 255
 3d6:	c1 f7       	brne	.-16     	; 0x3c8 <__mulsf3_pse+0x90>
 3d8:	fe 2b       	or	r31, r30
 3da:	88 0f       	add	r24, r24
 3dc:	91 1d       	adc	r25, r1
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	97 f9       	bld	r25, 7
 3e4:	08 95       	ret

000003e6 <__fp_inf>:
 3e6:	97 f9       	bld	r25, 7
 3e8:	9f 67       	ori	r25, 0x7F	; 127
 3ea:	80 e8       	ldi	r24, 0x80	; 128
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	08 95       	ret

000003f2 <__fp_nan>:
 3f2:	9f ef       	ldi	r25, 0xFF	; 255
 3f4:	80 ec       	ldi	r24, 0xC0	; 192
 3f6:	08 95       	ret

000003f8 <__fp_pscA>:
 3f8:	00 24       	eor	r0, r0
 3fa:	0a 94       	dec	r0
 3fc:	16 16       	cp	r1, r22
 3fe:	17 06       	cpc	r1, r23
 400:	18 06       	cpc	r1, r24
 402:	09 06       	cpc	r0, r25
 404:	08 95       	ret

00000406 <__fp_pscB>:
 406:	00 24       	eor	r0, r0
 408:	0a 94       	dec	r0
 40a:	12 16       	cp	r1, r18
 40c:	13 06       	cpc	r1, r19
 40e:	14 06       	cpc	r1, r20
 410:	05 06       	cpc	r0, r21
 412:	08 95       	ret

00000414 <__fp_round>:
 414:	09 2e       	mov	r0, r25
 416:	03 94       	inc	r0
 418:	00 0c       	add	r0, r0
 41a:	11 f4       	brne	.+4      	; 0x420 <__fp_round+0xc>
 41c:	88 23       	and	r24, r24
 41e:	52 f0       	brmi	.+20     	; 0x434 <__fp_round+0x20>
 420:	bb 0f       	add	r27, r27
 422:	40 f4       	brcc	.+16     	; 0x434 <__fp_round+0x20>
 424:	bf 2b       	or	r27, r31
 426:	11 f4       	brne	.+4      	; 0x42c <__fp_round+0x18>
 428:	60 ff       	sbrs	r22, 0
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__fp_round+0x20>
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	8f 4f       	sbci	r24, 0xFF	; 255
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	08 95       	ret

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
