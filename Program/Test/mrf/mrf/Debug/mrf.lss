
mrf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001074  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb5  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000859  00000000  00000000  00002151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  000029ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ea  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054c  00000000  00000000  000030de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	aa 30       	cpi	r26, 0x0A	; 10
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  cc:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
unsigned char buffer[PACKET_LENGTH] = {0,0,0,0,0,0,0,0,0,0};


int main(void)
{
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
  d4:	4a e0       	ldi	r20, 0x0A	; 10
  d6:	60 e1       	ldi	r22, 0x10	; 16
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 a5 00 	call	0x14a	; 0x14a <m_rf_open>
	buffer[0] = 0xA0;
  de:	80 ea       	ldi	r24, 0xA0	; 160
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

    /* Replace with your application code */
    while (1) 
    {
		m_wait(1000);
		m_rf_send(0x1C, buffer, PACKET_LENGTH);
  e4:	10 e3       	ldi	r17, 0x30	; 48
  e6:	d5 e7       	ldi	r29, 0x75	; 117
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
  e8:	c0 e4       	ldi	r28, 0x40	; 64
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	83 ed       	ldi	r24, 0xD3	; 211
  ee:	90 e3       	ldi	r25, 0x30	; 48
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x1c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x26>
  fa:	00 00       	nop

    /* Replace with your application code */
    while (1) 
    {
		m_wait(1000);
		m_rf_send(0x1C, buffer, PACKET_LENGTH);
  fc:	4a e0       	ldi	r20, 0x0A	; 10
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	71 e0       	ldi	r23, 0x01	; 1
 102:	8c e1       	ldi	r24, 0x1C	; 28
 104:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <m_rf_send>
 108:	21 2f       	mov	r18, r17
 10a:	3d 2f       	mov	r19, r29
 10c:	05 c0       	rjmp	.+10     	; 0x118 <main+0x44>
 10e:	01 97       	sbiw	r24, 0x01	; 1
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x3a>
 112:	21 50       	subi	r18, 0x01	; 1
 114:	31 09       	sbc	r19, r1
    /* Replace with your application code */
    while (1) 
    {
		m_wait(1000);
		m_rf_send(0x1C, buffer, PACKET_LENGTH);
		for(int i = 0; i<30000; i++){
 116:	19 f0       	breq	.+6      	; 0x11e <main+0x4a>
#define RXADDRESS	0x10
unsigned char buffer[PACKET_LENGTH] = {0,0,0,0,0,0,0,0,0,0};


int main(void)
{
 118:	82 e3       	ldi	r24, 0x32	; 50
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	f8 cf       	rjmp	.-16     	; 0x10e <main+0x3a>
		m_wait(1000);
		m_rf_send(0x1C, buffer, PACKET_LENGTH);
		for(int i = 0; i<30000; i++){
			for(int j = 0; j< 50; j++){}
		}
		m_red(TOGGLE);
 11e:	6e 9a       	sbi	0x0d, 6	; 13
 120:	8e b1       	in	r24, 0x0e	; 14
 122:	8c 27       	eor	r24, r28
 124:	8e b9       	out	0x0e, r24	; 14
 126:	e1 cf       	rjmp	.-62     	; 0xea <main+0x16>

00000128 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 128:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 12a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 12c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 134:	e9 e6       	ldi	r30, 0x69	; 105
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	80 83       	st	Z, r24
 13e:	80 81       	ld	r24, Z
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 144:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 146:	78 94       	sei
 148:	08 95       	ret

0000014a <m_rf_open>:
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);

	return 1;
}
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	18 2f       	mov	r17, r24
 152:	d6 2f       	mov	r29, r22
 154:	c4 2f       	mov	r28, r20
 156:	0e 94 94 00 	call	0x128	; 0x128 <m_bus_init>
 15a:	94 ea       	ldi	r25, 0xA4	; 164
 15c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	99 23       	and	r25, r25
 168:	ec f7       	brge	.-6      	; 0x164 <m_rf_open+0x1a>
 16a:	90 e5       	ldi	r25, 0x50	; 80
 16c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 170:	94 e8       	ldi	r25, 0x84	; 132
 172:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 176:	ec eb       	ldi	r30, 0xBC	; 188
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	99 23       	and	r25, r25
 17e:	ec f7       	brge	.-6      	; 0x17a <m_rf_open+0x30>
 180:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 184:	98 7f       	andi	r25, 0xF8	; 248
 186:	90 32       	cpi	r25, 0x20	; 32
 188:	29 f4       	brne	.+10     	; 0x194 <m_rf_open+0x4a>
 18a:	84 e9       	ldi	r24, 0x94	; 148
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	2d c0       	rjmp	.+90     	; 0x1ee <m_rf_open+0xa4>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 19a:	84 e8       	ldi	r24, 0x84	; 132
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	99 23       	and	r25, r25
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <m_rf_open+0x5a>
 1aa:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1ae:	84 e8       	ldi	r24, 0x84	; 132
 1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	ec f7       	brge	.-6      	; 0x1b8 <m_rf_open+0x6e>
 1be:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1c8:	ec eb       	ldi	r30, 0xBC	; 188
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	ec f7       	brge	.-6      	; 0x1cc <m_rf_open+0x82>
 1d2:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1d6:	84 e8       	ldi	r24, 0x84	; 132
 1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1dc:	ec eb       	ldi	r30, 0xBC	; 188
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 23       	and	r24, r24
 1e4:	ec f7       	brge	.-6      	; 0x1e0 <m_rf_open+0x96>
 1e6:	84 e9       	ldi	r24, 0x94	; 148
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
 1fa:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 1fc:	94 ea       	ldi	r25, 0xA4	; 164
 1fe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 202:	ec eb       	ldi	r30, 0xBC	; 188
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	99 23       	and	r25, r25
 20a:	ec f7       	brge	.-6      	; 0x206 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 20c:	90 e5       	ldi	r25, 0x50	; 80
 20e:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 212:	94 e8       	ldi	r25, 0x84	; 132
 214:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 218:	ec eb       	ldi	r30, 0xBC	; 188
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	90 81       	ld	r25, Z
 21e:	99 23       	and	r25, r25
 220:	ec f7       	brge	.-6      	; 0x21c <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 222:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 226:	98 7f       	andi	r25, 0xF8	; 248
 228:	90 32       	cpi	r25, 0x20	; 32
 22a:	31 f4       	brne	.+12     	; 0x238 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 22c:	84 e9       	ldi	r24, 0x94	; 148
 22e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		sei();	// re-enable interrupts
 232:	78 94       	sei
		return 0;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	2d c0       	rjmp	.+90     	; 0x292 <m_rf_send+0x9c>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
 238:	93 e0       	ldi	r25, 0x03	; 3
 23a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 23e:	94 e8       	ldi	r25, 0x84	; 132
 240:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 244:	ec eb       	ldi	r30, 0xBC	; 188
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	90 81       	ld	r25, Z
 24a:	99 23       	and	r25, r25
 24c:	ec f7       	brge	.-6      	; 0x248 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
 24e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 252:	84 e8       	ldi	r24, 0x84	; 132
 254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 258:	ec eb       	ldi	r30, 0xBC	; 188
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 23       	and	r24, r24
 260:	ec f7       	brge	.-6      	; 0x25c <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
 262:	44 23       	and	r20, r20
 264:	89 f0       	breq	.+34     	; 0x288 <m_rf_send+0x92>
 266:	db 01       	movw	r26, r22
 268:	64 0f       	add	r22, r20
 26a:	71 1d       	adc	r23, r1
		TWDR = buffer[i];
 26c:	cb eb       	ldi	r28, 0xBB	; 187
 26e:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
 270:	ec eb       	ldi	r30, 0xBC	; 188
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	94 e8       	ldi	r25, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
 276:	8d 91       	ld	r24, X+
 278:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
 27a:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){};
 27c:	80 81       	ld	r24, Z
 27e:	88 23       	and	r24, r24
 280:	ec f7       	brge	.-6      	; 0x27c <m_rf_send+0x86>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
 282:	a6 17       	cp	r26, r22
 284:	b7 07       	cpc	r27, r23
 286:	b9 f7       	brne	.-18     	; 0x276 <m_rf_send+0x80>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 288:	84 e9       	ldi	r24, 0x94	; 148
 28a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// RE-ENABLE INTERRUPTS
	sei();
 28e:	78 94       	sei
	
	return 1;
 290:	81 e0       	ldi	r24, 0x01	; 1
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
